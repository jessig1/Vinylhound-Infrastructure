# Vinylhound Infrastructure Environment Configuration
# Copy this file to .env and update values for your environment

# ============================================================================
# DATABASE CONFIGURATION
# ============================================================================

# PostgreSQL Database Connection
POSTGRES_USER=vinylhound
POSTGRES_PASSWORD=localpassword
POSTGRES_DB=vinylhound

# Database connection details for services
DB_HOST=postgres
DB_PORT=5432
DB_USER=vinylhound
DB_PASSWORD=localpassword
DB_NAME=vinylhound

# SSL/TLS Configuration
# Options: disable, allow, prefer, require, verify-ca, verify-full
# Use 'require' or higher in production
DB_SSLMODE=disable

# ============================================================================
# API GATEWAY CONFIGURATION
# ============================================================================

# Port for API Gateway (reverse proxy)
GATEWAY_PORT=8080

# Service URLs (internal Docker network)
USER_SERVICE_URL=http://user-service:8001
CATALOG_SERVICE_URL=http://catalog-service:8002
RATING_SERVICE_URL=http://rating-service:8003
PLAYLIST_SERVICE_URL=http://playlist-service:8004

# ============================================================================
# AUTHENTICATION & SECURITY
# ============================================================================

# JWT Secret Key (REQUIRED - MUST be changed in production)
# Generate with: openssl rand -base64 32
JWT_SECRET=local-development-secret-key

# JWT Token Expiration (in hours)
JWT_EXPIRATION_HOURS=24

# Password Hashing Cost (10-14 recommended, higher = slower but more secure)
BCRYPT_COST=12

# ============================================================================
# CORS CONFIGURATION
# ============================================================================

# Allowed origins for Cross-Origin Resource Sharing
# Comma-separated list of allowed frontend URLs
CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:5173,http://localhost:8080

# ============================================================================
# SERVICE PORTS (Internal)
# ============================================================================

# User Service Port
USER_SERVICE_PORT=8001

# Catalog Service Port
CATALOG_SERVICE_PORT=8002

# Rating Service Port
RATING_SERVICE_PORT=8003

# Playlist Service Port
PLAYLIST_SERVICE_PORT=8004

# Frontend Port
FRONTEND_PORT=3000

# ============================================================================
# SPOTIFY API CONFIGURATION
# ============================================================================

# Spotify API Credentials
# Get these from: https://developer.spotify.com/dashboard
SPOTIFY_CLIENT_ID=fcf897c2adde424cbc90d70c38311dee
SPOTIFY_CLIENT_SECRET=06f5f778c5634f33847948f8cdc8302e

# ============================================================================
# LOGGING CONFIGURATION
# ============================================================================

# Log level: debug, info, warn, error
LOG_LEVEL=info

# Log format: json, text
LOG_FORMAT=json

# ============================================================================
# ENVIRONMENT
# ============================================================================

# Environment: development, staging, production
ENV=development

# ============================================================================
# FRONTEND CONFIGURATION
# ============================================================================

# API base URL for frontend (external access)
VITE_API_BASE_URL=http://localhost:8080/api/v1

# ============================================================================
# DOCKER COMPOSE OVERRIDES
# ============================================================================

# PostgreSQL external port (host machine)
POSTGRES_EXTERNAL_PORT=54320

# ============================================================================
# HEALTH CHECK CONFIGURATION
# ============================================================================

# Health check intervals (seconds)
HEALTH_CHECK_INTERVAL=30
HEALTH_CHECK_TIMEOUT=10
HEALTH_CHECK_RETRIES=3

# ============================================================================
# PRODUCTION NOTES
# ============================================================================
#
# Before deploying to production:
# 1. Change POSTGRES_PASSWORD to a strong random password
# 2. Change DB_PASSWORD to match POSTGRES_PASSWORD
# 3. Generate a new JWT_SECRET with: openssl rand -base64 32
# 4. Set DB_SSLMODE=require or verify-full
# 5. Update CORS_ALLOWED_ORIGINS to your production domain
# 6. Set LOG_LEVEL=warn or error
# 7. Set ENV=production
# 8. Review and update all service URLs for production hostnames
# 9. Consider using Docker secrets or Kubernetes secrets instead of .env
# 10. Enable rate limiting and request throttling
#
